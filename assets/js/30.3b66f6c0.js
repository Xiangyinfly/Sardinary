(window.webpackJsonp=window.webpackJsonp||[]).push([[30],{510:function(e,t,n){e.exports=n.p+"assets/img/p1.126519d4.png"},511:function(e,t,n){e.exports=n.p+"assets/img/p2.61de6e6a.png"},512:function(e,t,n){e.exports=n.p+"assets/img/p3.210a243c.png"},513:function(e,t,n){e.exports=n.p+"assets/img/p4.17f24973.png"},514:function(e,t,n){e.exports=n.p+"assets/img/p5.77fcb817.png"},515:function(e,t,n){e.exports=n.p+"assets/img/p6.3ff0e694.png"},516:function(e,t,n){e.exports=n.p+"assets/img/p7.3e203507.png"},517:function(e,t,n){e.exports=n.p+"assets/img/p8.dc7efd01.png"},518:function(e,t,n){e.exports=n.p+"assets/img/p9.565a3b62.png"},598:function(e,t,n){"use strict";n.r(t);var i=n(2),a=Object(i.a)({},(function(){var e=this,t=e._self._c;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"springsecurity"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springsecurity"}},[e._v("#")]),e._v(" SpringSecurity")]),e._v(" "),t("h1",{attrs:{id:"概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#概述"}},[e._v("#")]),e._v(" 概述")]),e._v(" "),t("h2",{attrs:{id:"springsecurity流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#springsecurity流程"}},[e._v("#")]),e._v(" SpringSecurity流程")]),e._v(" "),t("p",[t("img",{attrs:{src:n(510),alt:"SS流程.png"}})]),e._v(" "),t("p",[e._v("其中的过滤器链")]),e._v(" "),t("p",[t("img",{attrs:{src:n(511),alt:"SS过滤器链.png"}})]),e._v(" "),t("h2",{attrs:{id:"登录校验流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#登录校验流程"}},[e._v("#")]),e._v(" 登录校验流程")]),e._v(" "),t("p",[t("img",{attrs:{src:n(512),alt:"登录校验流程.png"}})]),e._v(" "),t("h2",{attrs:{id:"认证流程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#认证流程"}},[e._v("#")]),e._v(" 认证流程")]),e._v(" "),t("p",[t("img",{attrs:{src:n(513),alt:"认证流程.png"}})]),e._v(" "),t("p",[t("img",{attrs:{src:n(514),alt:"认证流程2.png"}})]),e._v(" "),t("p",[t("img",{attrs:{src:n(515),alt:"认证流程3.png"}})]),e._v(" "),t("p",[t("img",{attrs:{src:n(516),alt:"认证流程4.png"}})]),e._v(" "),t("p",[t("img",{attrs:{src:n(517),alt:"认证流程5.png"}})]),e._v(" "),t("p",[e._v("自定义登录页面")]),e._v(" "),t("p",[e._v("认证的核心是各种AuthenticationProvider，其中使用的最多的一个DaoAuthenticationProvider")]),e._v(" "),t("p",[t("img",{attrs:{src:n(518),alt:"Pasted image 20231104221101.png"}})]),e._v(" "),t("p",[e._v("UserDetails是用户信息的实体类，UserDetailsService自定义实现，根据用户名密码加载UserDetails，PasswordEncoder就是密码的加密类。\nDaoAuthenticationProvider通过UserDetailsService以及PasswordEncoder，将用户名密码替换成UserDetails和Authorities。\nDaoAuthenticationProvider的由来：在WebSecurityConfigurerAdapter中，以下代码之前都看过，AuthenticationManager\n的由来也都说明过，其中有一个parent被所有的子AuthenticationManager共享，而这个DaoAuthenticationProvider就是包括在parent中。")]),e._v(" "),t("h2",{attrs:{id:"自定义图形验证码"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#自定义图形验证码"}},[e._v("#")]),e._v(" 自定义图形验证码")]),e._v(" "),t("p",[e._v("引入依赖")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("    <groupId>com.github.penggle</groupId>\n    <artifactId>kaptcha</artifactId>\n    <version>2.3.2</version>\n</dependency>\n")])])]),t("p",[e._v("配置config类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Configuration\npublic class CaptchaConfig {\n    @Bean\n    public Producer producer(){\n\n        Properties properties = new Properties();\n        properties.setProperty("kaptcha.image.width","150");\n        properties.setProperty("kaptcha.image.height","50");\n        properties.setProperty("kaptcha.textproducer.char.string","0123456789");\n        properties.setProperty("kaptcha.textproducer.char.length","4");\n\n        Config config = new Config(properties);\n        DefaultKaptcha defaultKaptcha = new DefaultKaptcha();\n        defaultKaptcha.setConfig(config);\n\n        return defaultKaptcha;\n    }\n}\n')])])]),t("p",[e._v("配置controller类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Slf4j\n@Controller\n@RequestMapping("/captcha")\npublic class CaptchaController {\n\n    @Autowired\n    private Producer producer;\n\n    @SneakyThrows\n    @GetMapping("/captcha.jpg")\n    public void getCaptcha(HttpServletRequest request, HttpServletResponse response){\n        response.setContentType("image/jpeg");\n        String capText = producer.createText();\n        log.info("验证码:{}",capText);\n\n        request.getSession().setAttribute("captcha",capText);\n        BufferedImage image = producer.createImage(capText);\n        ServletOutputStream out = response.getOutputStream();\n\n        ImageIO.write(image,"jpg",out);\n        out.flush();\n\n    }\n\n}\n')])])]),t("p",[e._v("配置异常类")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class VerificationCodeException extends AuthenticationException {\n\n    public VerificationCodeException(){\n        super("图形验证码验证失败!");\n    }\n}\n')])])]),t("p",[e._v("配置校验过滤器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@Slf4j\npublic class VerificationCodeFilter extends OncePerRequestFilter {  //每次请求都会执行\n\n    //验证码异常跳转到/login  重写失败方法\n    AuthenticationFailureHandler authenticationFailureHandler = new AuthenticationFailureHandler() {\n        @Override\n        public void onAuthenticationFailure(HttpServletRequest request, HttpServletResponse response, AuthenticationException exception) throws IOException, ServletException {\n            log.info("异常:{}",exception.getMessage());\n            response.sendRedirect("/login");\n        }\n    };\n\n    @Override\n    protected void doFilterInternal(HttpServletRequest request, HttpServletResponse response, FilterChain filterChain) throws ServletException, IOException {\n        if(!("/login".equals(request.getRequestURI()) && request.getMethod().equals("POST"))){//login页面不走验证码\n            filterChain.doFilter(request,response);\n        }else{\n            try {\n                verificationCode(request,response);\n                filterChain.doFilter(request,response);\n            } catch (VerificationCodeException e) {\n                authenticationFailureHandler.onAuthenticationFailure(request,response,e);\n            }\n\n        }\n    }\n\n    public void verificationCode(HttpServletRequest request, HttpServletResponse response) throws VerificationCodeException {\n        String requestCode = request.getParameter("captcha");\n        HttpSession session = request.getSession();\n        String sessionCode = (String) session.getAttribute("captcha");\n        if(!StringUtils.isEmpty(sessionCode)){\n            session.removeAttribute("captcha");}\n\n        if(StringUtils.isEmpty(requestCode) || StringUtils.isEmpty(sessionCode) || !requestCode.equals(sessionCode)){\n            throw new VerificationCodeException();\n        }\n\n    }\n}\n')])])]),t("p",[e._v("在SecurityConfig类添加验证码过滤器")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http.addFilterBefore(new VerificationCodeFilter(),UsernamePasswordAuthenticationFilter.class);\n")])])]),t("p",[e._v("前端对接")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('验证码:<input type="text" name="captcha"><br/>\n<img src="/captcha/captcha.jpg" />\n')])])]),t("p",[e._v("SpringSecurity提供的另一种校验方式：")]),e._v(" "),t("p",[e._v("1、找到自定义DaoAuthenticationProvider在哪里替换SpringSecurity自带的DaoAuthenticationProvider\n@EnableWebSecurity\nHttpSecurityConfiguration httpSecurity() authenticationManager()\nthis.authenticationConfiguration.getAuthenticationManager()\nthis.authenticationManager = authBuilder.build(); this.object =\ndoBuild(); configure();\nInitializeAuthenticationProviderBeanManagerConfigurer\n//在这里能获取到值说明是我们自定义了一个AuthenticationProvider实现类\nAuthenticationProvider authenticationProvider =\ngetBeanOrNull(AuthenticationProvider.class);")]),e._v(" "),t("p",[e._v("InitializeAuthenticationProviderBeanManagerConfigurer")]),e._v(" "),t("p",[e._v("创建MyDaoAuthenticationProvider")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("@Component\npublic class MyDaoAuthenticationProvider extends DaoAuthenticationProvider {\n    public MyDaoAuthenticationProvider(UserDetailsService userDetailsService, PasswordEncoder passwordEncoder) {\n        super. setUserDetailsService(userDetailsService);\n        super. setPasswordEncoder (passwordEncoder);\n    }\n\n    //在这里获取request做比对\n    //authentication中的details就是MyWebAuthenticationDetails\n    @Override\n    protected void additionalAuthenticationChecks(UserDetails userDetails, UsernamePasswordAuthenticationToken authentication) throws AuthenticationException {\n        MyWebAuthenticationDetails details = (MyWebAuthenticationDetails) authentication.getDetails();\n\n        if(!details.isImageCodeIsRight()){\n            throw new VerificationCodeException();\n        }\n\n        super.additionalAuthenticationChecks(userDetails, authentication);\n    }\n}\n")])])]),t("p",[e._v("创建MyWebAuthenticationDetails")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('public class MyWebAuthenticationDetails extends WebAuthenticationDetails {\n\n    //加一个标识判断验证码是否正确\n    private boolean imageCodeIsRight;\n\n    public boolean isImageCodeIsRight() {\n        return imageCodeIsRight;\n    }\n\n    public MyWebAuthenticationDetails(HttpServletRequest request) {\n        super(request);\n        String requestCode = request.getParameter("captcha");\n        HttpSession session = request.getSession();\n        String sessionCode = (String) session.getAttribute("captcha");\n        if(!StringUtils.isEmpty(sessionCode)){\n            session.removeAttribute("captcha");\n            if(sessionCode.equals(requestCode)){\n                this.imageCodeIsRight = true;\n            }\n        }\n    }\n\n    public MyWebAuthenticationDetails(String remoteAddress, String sessionId) {\n        super(remoteAddress, sessionId);\n    }\n}\n')])])]),t("p",[e._v("创建MyWebAuthenticationDetailsSource")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class MyWebAuthenticationDetailsSource extends WebAuthenticationDetailsSource {\n    @Override\n    public WebAuthenticationDetails buildDetails(HttpServletRequest context) {\n        return super.buildDetails(context);\n    }\n}\n")])])]),t("p",[e._v("config类中加入")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("http.formLogin(formLogin -> formLogin\n        .authenticationDetailsSource(new MyWebAuthenticationDetailsSource())\n")])])]),t("p",[e._v("2、找到自定义的DaoAuthenticationProvider中如何使用到request @EnableWebSecurity SecurityConfig\nconfigure(B http)\n//这里如果我们自己添加一个自定义的authenticationDetailsSource\n会将默认的替换掉 if (this.authenticationDetailsSource != null) {\nthis.authFilter.setAuthenticationDetailsSource(this.authenticationDetailsSource);\n}")]),e._v(" "),t("p",[e._v("持久化令牌\n将登录信息记录到数据库中【token令牌:和username关联起来的一个值】\nSpringSecurity默认自带了一个令牌管理的Dao\n但是是使用的spring-jdbc:JdbcTokenRepositoryImpl 改造成mybatis-plus的")]),e._v(" "),t("p",[e._v("建立登录信息表")]),e._v(" "),t("p",[e._v("建立entity类SysToken")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v('@TableName ("t_sys_token" )\n@Data\npublic class SysToken {\n    @TableField (value = "username")\n    private String username;\n    @TableField (value = "series")\n    private String series;\n    @TableField(value = "token")\n    private String tokenValue;\n    @TableField (value = "last_used" )\n    private Date date;\n}\n')])])]),t("p",[e._v("建立SysTokenMapper 建立SysPersistentTokenRepositoryImpl")]),e._v(" "),t("div",{staticClass:"language- extra-class"},[t("pre",{pre:!0,attrs:{class:"language-text"}},[t("code",[e._v("public class SysPersistentTokenRepositoryImpl implements PersistentTokenRepository {\n\n}\n\n")])])])])}),[],!1,null,null,null);t.default=a.exports}}]);